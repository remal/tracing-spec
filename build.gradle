import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

buildscript {
    dependencies {
        classpath 'name.remal:gradle-plugins:1.0.198'
        classpath 'gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:0.7'
    }
    repositories {
        jcenter()
        gradlePluginPortal()
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

allprojects {
    group = 'name.remal.tracing-spec'
    version = '0.0.0-SNAPSHOT'

    apply plugin: 'name.remal.default-plugins'

    repositories {
        jcenter()
    }

    if (path != ':dependency-versions') {
        dependencies {
            allResolvable platform(project(':dependency-versions'))
            allResolvable platform('org.springframework.boot:spring-boot-dependencies')
            allResolvable platform('io.grpc:grpc-bom')
            allResolvable platform('com.google.protobuf:protobuf-bom')
        }
    }

    pluginManager.withPlugin('java') {
        apply plugin: 'checkstyle'
        apply plugin: 'jacoco'
        apply plugin: 'name.remal.insert-null-checks'
        apply plugin: 'name.remal.module-info-generator'

        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        configurations {
            compileOnlyAllHidden { conf ->
                // We don't want IDE to index these dependencies, but they are required for compilation
                project.afterEvaluate {
                    project.tasks.withType(AbstractCompile) {
                        onlyIf {
                            classpath += conf
                            return true
                        }
                    }
                }
            }
            staticAnalysis {
                compileOnly.extendsFrom(it)
                testImplementation.extendsFrom(it)
            }
            annotationProcessing {
                compileOnlyAll.extendsFrom(it)
                apt.extendsFrom(it)
            }
            optional {
                compileOnly.extendsFrom(it)
                testImplementation.extendsFrom(it)
            }
        }

        dependencies {
            components.all(JacocoAlignmentRule)

            compileOnlyAllHidden 'com.google.j2objc:j2objc-annotations'

            compileOnly 'org.hibernate.validator:hibernate-validator'
            compileOnly 'com.fasterxml.jackson.core:jackson-databind'

            staticAnalysis 'com.google.code.findbugs:jsr305'
            staticAnalysis 'com.google.errorprone:error_prone_annotations'
            staticAnalysis 'org.jetbrains:annotations'

            annotationProcessing 'org.projectlombok:lombok'
            annotationProcessing 'org.immutables:value'

            apt 'org.hibernate.validator:hibernate-validator-annotation-processor'


            testImplementation 'org.junit.jupiter:junit-jupiter-api'
            testImplementation 'org.hamcrest:hamcrest'
            testImplementation 'org.mockito:mockito-junit-jupiter'
            testImplementation 'org.mockito:mockito-inline'

            testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
            testRuntimeOnly 'org.apache.logging.log4j:log4j-core'
            testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl'
        }

        transitiveDependencies {
            excludeStaticAnalysisTools()
        }

        configurations.all {
            resolutionStrategy {
                eachDependency { DependencyResolveDetails details ->
                    String groupModule = "${details.target.group}:${details.target.name}"
                    if (groupModule == 'com.google.guava:guava') {
                        if (details.target.version.endsWith('-android')) {
                            String newVersion = details.target.version.replaceFirst(/-android$/, '-jre')
                            details.useTarget("$groupModule:$newVersion")
                        }
                    }
                    if ("$groupModule" == 'org.hamcrest:hamcrest-core') {
                        details.useTarget("org.hamcrest:hamcrest:${details.target.version}")
                    }
                }
            }
        }

        tasks.withType(JavaCompile) {
            options.compilerArgs.addAll(
                [
                    '-Werror',
                    '-Xlint:all',
                    '-Xlint:-rawtypes',
                    '-Xlint:-serial',
                    '-Xlint:-processing',
                ]
            )
        }

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        pluginManager.withPlugin('name.remal.classes-relocation') {
            configurations.excludeFromForcedClassesRelocation.extendsFrom(configurations.staticAnalysis)

            dependencies {
                excludeFromForcedClassesRelocation 'com.google.j2objc:j2objc-annotations'
            }
        }

        pluginManager.withPlugin('checkstyle') {
            checkstyle {
                configDirectory = rootProject.projectDir
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

class JacocoAlignmentRule implements ComponentMetadataRule {
    void execute(ComponentMetadataContext ctx) {
        ctx.details.with {
            if (id.group == 'org.jacoco') {
                belongsTo("${id.group}:jacoco-bom:${id.version}")
            }
        }
    }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/*
apply plugin: 'java-library'

dependencies {
    runtimeOnly gradleApi()
}
//*/

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

forBuildOnLocal {
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.gradle.plugin.idea-ext'

    idea {
        project {
            jdkName = '1.8'
            languageLevel = new IdeaLanguageLevel('8')
            targetBytecodeVersion = JavaVersion.VERSION_1_8

            settings {
                doNotDetectFrameworks('android', 'web')

                encodings {
                    encoding = 'UTF-8'
                    bomPolicy = 'WITH_NO_BOM'
                    properties {
                        encoding = 'US-ASCII'
                        transparentNativeToAsciiConversion = true
                    }
                }
            }
        }
    }
}
