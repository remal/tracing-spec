apply plugin: 'java-library'

dependencies {
    api project(':tracing-spec-model')
    api 'io.jaegertracing:jaeger-proto'

    integrationImplementation 'org.testcontainers:testcontainers'
    integrationImplementation 'io.jaegertracing:jaeger-thrift'
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

File protoFilesDir = file('build/proto')
TaskProvider<Task> copyProtoFiles = tasks.register('copyProtoFiles', Copy) {
    from('jaeger-idl/proto/api_v2')
    into(protoFilesDir)

    doFirst { protoFilesDir.deleteDir() }

    doLast {
        protoFilesDir.traverse { File file ->
            if (!file.file) return

            String content = file.getText('UTF-8')

            content = content.replaceAll(/import "(gogoproto|protoc-gen-swagger)\/[^"]+"\s*;/, '')
            content = content.replaceAll(
                /(option\s*)?\((gogoproto|grpc)\.[^)]+\)\s*=\s*(true|false|"[^"]*"/
                    + /|\{[^}]*?(info:[^}]+}|external_docs:[^}]+}|[^}]*?)*})[,;]?/,
                ''
            )
            content = content.replaceAll(/\[\s+\]/, '')

            content = content.replaceAll(/option \w+_package\s*=\s*"[^"]*";/, '')
            content = content + '\n\noption java_package = "name.remal.tracingspec.retriever.jaeger.internal.grpc";'

            file.setText(content, 'UTF-8')
        }
    }
}

[
    'model.proto',
    'query.proto',
].forEach { protoFileName ->
    String taskName = 'generateFrom' + protoFileName.split('\\.')
        .collect { it.capitalize() }
        .join('')
    File outputDir = file("build/generated/$taskName")
    TaskProvider<Task> generateModelProto = tasks.register(taskName, Exec) {
        dependsOn(copyProtoFiles)

        outputs.dir(outputDir)
        doFirst {
            outputDir.deleteDir()
            outputDir.mkdirs()
        }

        /*
         * If you use Docker for Windows, don't forget to go to Settings -> Resource -> File share and add project
         * directory (or one of its parents) to the list there.
         */
        String hostPath = project.projectDir.absolutePath.replace(File.separator, '/')
        String containerPath = hostPath.replaceFirst(/^[a-zA-Z]:/, '')

        String outputDirRelativePath = project.relativePath(outputDir).replace(File.separator, '/')
        String protoFilesDirRelativePath = project.relativePath(protoFilesDir).replace(File.separator, '/')

        setCommandLine(
            'docker',
            'run',
            '--rm',
            '-v',
            "$hostPath:$containerPath",
            '-w',
            "$containerPath",

            'jaegertracing/protobuf:latest',

            "--proto_path=$containerPath",
            '-I/usr/include/github.com/gogo/protobuf',
            "--java_out=$outputDirRelativePath",
            "--grpc-java_out=$outputDirRelativePath",
            "-I$protoFilesDirRelativePath",
            "$protoFilesDirRelativePath/$protoFileName"
        )
    }

    SourceSet sourceSet = sourceSets.main
    sourceSet.java.srcDir(outputDir)
    tasks.named(sourceSet.compileJavaTaskName).configure { dependsOn(generateModelProto) }
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

dockerImages.getAllTags('jaegertracing/all-in-one').forEach { String tagName ->
    if (!tagName.matches(/\d+\.\d+/)) return

    SourceSet testSourceSet = sourceSets.integration
    TaskProvider<Task> testVersionTask = tasks.register("testIntegration-$tagName", Test) {
        dependsOn(testSourceSet.classesTaskName)

        systemProperty('docker-image-tag', tagName)

        Test testTask = tasks.test
        group = testTask.group
        testClassesDirs = testTask.testClassesDirs
        classpath = testTask.classpath

        filter {
            includeTestsMatching('*VersionTest')
            failOnNoMatchingTests = true
        }
    }

    tasks.named('check').configure { dependsOn(testVersionTask) }
}
